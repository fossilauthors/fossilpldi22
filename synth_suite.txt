Benchmark idx+1||exp+1||>0__dag__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) + 1,
                         datafield2(x) ==
                         datafield1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) + 1,
                         datafield2(x) ==
                         datafield1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) + 1,
                         datafield2(x) ==
                         datafield1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) + 1,
                         datafield2(x) ==
                         datafield1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) + 1,
                         datafield2(x) ==
                         datafield1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 1,
                         datafield1(x) ==
                         datafield2(right(x)) + 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 1,
                         datafield2(x) ==
                         datafield1(right(x)) + 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 1,
                         datafield1(x) ==
                         datafield2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) - 1,
                         datafield1(x) ==
                         datafield2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) - 1,
                         datafield1(x) ==
                         datafield2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) - 1,
                         datafield1(x) ==
                         datafield2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) - 1,
                         datafield1(x) ==
                         datafield2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -2, datafield1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) - 1,
                         datafield2(x) ==
                         datafield1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -2, datafield2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) - 1,
                         datafield1(x) ==
                         datafield2(right(x)) - 1),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) - 1,
                         datafield2(x) ==
                         datafield1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 0))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 4,
                         datafield2(x) ==
                         datafield1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 1, datafield2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)) + 2,
                         datafield1(x) ==
                         datafield2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x)) + 4,
                         datafield2(x) ==
                         datafield1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x)) + 4,
                         datafield1(x) ==
                         datafield2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 1, datafield1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x)) + 2,
                         datafield2(x) ==
                         datafield1(right(x)) + 2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x)) + 4,
                         datafield1(x) ==
                         datafield2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x)%2 == 1))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == -1, datafield1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == -1, datafield2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) < 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(right(x))*2,
                         datafield1(x) ==
                         datafield2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(True,
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 2, datafield1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(left(x))*2,
                         datafield2(x) ==
                         datafield1(right(x))*2),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 2, datafield2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         datafield2(left(x))*2,
                         datafield1(x) ==
                         datafield2(right(x))*2),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         datafield1(right(x))*2,
                         datafield2(x) ==
                         datafield1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 4, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         2*datafield1(left(x)) -
                         datafield2(left(x)),
                         datafield1(x) ==
                         2*datafield1(right(x)) -
                         datafield2(right(x))),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)),
                         datafield2(x) ==
                         datafield1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 4, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         2*datafield2(left(x)) -
                         datafield1(left(x)),
                         datafield2(x) ==
                         2*datafield2(right(x)) -
                         datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)),
                         datafield1(x) ==
                         datafield2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 4, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         2*datafield1(left(x)) -
                         datafield2(left(x)),
                         datafield1(x) ==
                         2*datafield1(right(x)) -
                         datafield2(right(x))),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)),
                         datafield2(x) ==
                         datafield1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 4, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         2*datafield2(left(x)) -
                         datafield1(left(x)),
                         datafield2(x) ==
                         2*datafield2(right(x)) -
                         datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)),
                         datafield1(x) ==
                         datafield2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 4, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         2*datafield2(left(x)) -
                         datafield1(left(x)),
                         datafield2(x) ==
                         2*datafield2(right(x)) -
                         datafield1(right(x))),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)),
                         datafield1(x) ==
                         datafield2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 4, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         2*datafield2(left(x)) -
                         datafield1(left(x)),
                         datafield2(x) ==
                         2*datafield2(right(x)) -
                         datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)),
                         datafield1(x) ==
                         datafield2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__nocondition__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 4, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         2*datafield1(left(x)) -
                         datafield2(left(x)),
                         datafield1(x) ==
                         2*datafield1(right(x)) -
                         datafield2(right(x))),
                      If(True,
                         datafield2(x) ==
                         datafield1(left(x)),
                         datafield2(x) ==
                         datafield1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__keyrange__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield1(x) == 4, datafield2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         2*datafield1(left(x)) -
                         datafield2(left(x)),
                         datafield1(x) ==
                         2*datafield1(right(x)) -
                         datafield2(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         datafield1(left(x)),
                         datafield2(x) ==
                         datafield1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__nocondition__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 4, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         2*datafield2(left(x)) -
                         datafield1(left(x)),
                         datafield2(x) ==
                         2*datafield2(right(x)) -
                         datafield1(right(x))),
                      If(True,
                         datafield1(x) ==
                         datafield2(left(x)),
                         datafield1(x) ==
                         datafield2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__keyrange__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafield2(x) == 4, datafield1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         2*datafield2(left(x)) -
                         datafield1(left(x)),
                         datafield2(x) ==
                         2*datafield2(right(x)) -
                         datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         datafield2(left(x)),
                         datafield1(x) ==
                         datafield2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafield2(x) > 0))

----------------------

Benchmark di>0keyupdate__dag__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(True,
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield1(x) == 1, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  -1*(0 + datafield1(x) + datafield2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield1(x) == 1, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)))),
                  key(x) ==
                  -1*(0 + datafield1(x) + datafield2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield1(x) == 1, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  -1*(0 + datafield1(x) + datafield2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(True,
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield1(x) == 1, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  -1*(0 + datafield1(x) + datafield2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield1(x) == 1, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  -1*(0 + datafield1(x) + datafield2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(True,
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__datacompare__normal__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(True,
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__keyrange__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__datacompare__normal__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield1(x) == 1, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)))),
                  key(x) ==
                  -1*(0 + datafield1(x) + datafield2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafield2(x) == 1, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  -1*(0 + datafield2(x) + datafield1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di%2==0keyupdate__dag__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(True,
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__dag__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__dag__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield2(x) == 0, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  0 + 1*datafield2(x) + 3*datafield1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield2(x) == 0, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(True,
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  0 + 1*datafield2(x) + 3*datafield1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__datacompare__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield2(x) == 0, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  0 + 1*datafield2(x) + 3*datafield1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield2(x) == 0, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(True,
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  0 + 1*datafield2(x) + 3*datafield1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__nocondition__skipone__cycle=datafield2,datafield1__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield2(x) == 0, datafield1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield2(x) ==
                         3*datafield2(left(x)),
                         datafield2(x) ==
                         3*datafield2(right(x))),
                      If(True,
                         datafield1(x) ==
                         3*datafield1(right(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)))),
                  key(x) ==
                  0 + 1*datafield2(x) + 3*datafield1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__nocondition__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(True,
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__keyrange__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__datacompare__skipone__cycle=datafield1,datafield2__2/2

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafield1(x) == 0, datafield2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafield1(x),
                         datafield1(x) ==
                         3*datafield1(left(x)),
                         datafield1(x) ==
                         3*datafield1(right(x))),
                      If(3 == datafield2(x),
                         datafield2(x) ==
                         3*datafield2(right(x)),
                         datafield2(x) ==
                         3*datafield2(left(x)))),
                  key(x) ==
                  0 + 1*datafield1(x) + 3*datafield2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(True,
                         datafld1(x) ==
                         datafld2(right(x)) + 1,
                         datafld1(x) ==
                         datafld2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 1,
                         datafld1(x) ==
                         datafld2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__datacompare__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(right(x)) + 1,
                         datafld3(x) ==
                         datafld1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__nocondition__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      If(True,
                         datafld1(x) ==
                         datafld3(right(x)) + 1,
                         datafld1(x) ==
                         datafld3(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__keyrange__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(right(x)) + 1,
                         datafld1(x) ==
                         datafld3(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__datacompare__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(right(x)) + 1,
                         datafld3(x) ==
                         datafld1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__nocondition__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__nocondition__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1),
                      If(True,
                         datafld2(x) ==
                         datafld1(right(x)) + 1,
                         datafld2(x) ==
                         datafld1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 1,
                         datafld1(x) ==
                         datafld2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__datacompare__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(right(x)) + 1,
                         datafld2(x) ==
                         datafld3(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__nocondition__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      If(True,
                         datafld1(x) ==
                         datafld3(right(x)) + 1,
                         datafld1(x) ==
                         datafld3(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__keyrange__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 1,
                         datafld1(x) ==
                         datafld2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__datacompare__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(right(x)) + 1,
                         datafld1(x) ==
                         datafld2(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__nocondition__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__nocondition__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      If(True,
                         datafld2(x) ==
                         datafld3(right(x)) + 1,
                         datafld2(x) ==
                         datafld3(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__keyrange__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(right(x)) + 1,
                         datafld2(x) ==
                         datafld1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__datacompare__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(right(x)) + 1,
                         datafld2(x) ==
                         datafld1(left(x)) + 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1),
                      If(True,
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__nocondition__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      If(True,
                         datafld2(x) ==
                         datafld1(right(x)) - 1,
                         datafld2(x) ==
                         datafld1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__keyrange__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) - 1,
                         datafld1(x) ==
                         datafld2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__datacompare__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(right(x)) - 1,
                         datafld2(x) ==
                         datafld3(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__nocondition__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      If(True,
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__nocondition__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      If(True,
                         datafld3(x) ==
                         datafld2(right(x)) - 1,
                         datafld3(x) ==
                         datafld2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__keyrange__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(right(x)) - 1,
                         datafld1(x) ==
                         datafld3(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__datacompare__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(right(x)) - 1,
                         datafld2(x) ==
                         datafld1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      If(True,
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1),
                      If(True,
                         datafld1(x) ==
                         datafld2(right(x)) - 1,
                         datafld1(x) ==
                         datafld2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(right(x)) - 1,
                         datafld2(x) ==
                         datafld1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__datacompare__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(right(x)) - 1,
                         datafld1(x) ==
                         datafld3(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__nocondition__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      If(True,
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__nocondition__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      If(True,
                         datafld3(x) ==
                         datafld2(right(x)) - 1,
                         datafld3(x) ==
                         datafld2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__keyrange__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(right(x)) - 1,
                         datafld2(x) ==
                         datafld3(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(right(x)) - 1,
                         datafld1(x) ==
                         datafld2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__nocondition__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      If(True,
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld1(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1),
                      If(True,
                         datafld1(x) ==
                         datafld2(right(x)) - 1,
                         datafld1(x) ==
                         datafld2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld2(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__keyrange__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(right(x)) - 1,
                         datafld3(x) ==
                         datafld1(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__datacompare__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2, datafld3(x) == -4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(right(x)) - 1,
                         datafld3(x) ==
                         datafld2(left(x)) - 1)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 4,
                         datafld3(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__nocondition__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld3(right(x)) + 4,
                         datafld1(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 4,
                         datafld3(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__keyrange__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(right(x)) + 4,
                         datafld3(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 4,
                         datafld1(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(right(x)) + 4,
                         datafld2(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 4,
                         datafld1(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__keyrange__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 4,
                         datafld3(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__keyrange__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(right(x)) + 4,
                         datafld3(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 4,
                         datafld1(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__nocondition__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(True,
                         datafld2(x) ==
                         datafld1(right(x)) + 4,
                         datafld2(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__keyrange__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__keyrange__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(right(x)) + 4,
                         datafld2(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__datacompare__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 4,
                         datafld3(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__datacompare__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(right(x)) + 4,
                         datafld2(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__nocondition__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 4,
                         datafld3(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__nocondition__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(True,
                         datafld2(x) ==
                         datafld1(right(x)) + 4,
                         datafld2(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 4,
                         datafld2(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__datacompare__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 4,
                         datafld3(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(right(x)) + 4,
                         datafld2(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__nocondition__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 4,
                         datafld1(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__nocondition__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(True,
                         datafld3(x) ==
                         datafld1(right(x)) + 4,
                         datafld3(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 4,
                         datafld2(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__datacompare__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 4,
                         datafld3(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__datacompare__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(right(x)) + 4,
                         datafld1(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__nocondition__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld3(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 4,
                         datafld3(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__keyrange__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(right(x)) + 4,
                         datafld2(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__nocondition__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 4,
                         datafld2(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__nocondition__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld3(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(True,
                         datafld3(x) ==
                         datafld1(right(x)) + 4,
                         datafld3(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__keyrange__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 4,
                         datafld1(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__keyrange__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld3(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(right(x)) + 4,
                         datafld3(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 4,
                         datafld1(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld3(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(right(x)) + 4,
                         datafld3(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__nocondition__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__keyrange__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 4,
                         datafld1(x) ==
                         datafld2(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(right(x)) + 4,
                         datafld2(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld3(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 4,
                         datafld3(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__nocondition__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(True,
                         datafld2(x) ==
                         datafld1(right(x)) + 4,
                         datafld2(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld3(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 4,
                         datafld3(x) ==
                         datafld1(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(right(x)) + 4,
                         datafld1(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__datacompare__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(right(x)) + 4,
                         datafld1(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__nocondition__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 4,
                         datafld1(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__nocondition__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(True,
                         datafld1(x) ==
                         datafld3(right(x)) + 4,
                         datafld1(x) ==
                         datafld3(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__keyrange__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld1(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 4,
                         datafld1(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(right(x)) + 4,
                         datafld2(x) ==
                         datafld1(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1, datafld2(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 4,
                         datafld2(x) ==
                         datafld3(right(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1, datafld3(x) == 3),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(right(x)) + 4,
                         datafld3(x) ==
                         datafld2(left(x)) + 4)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__nocondition__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__nocondition__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld1(right(x))*2,
                         datafld3(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(right(x))*2,
                         datafld2(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(3 == datafld3(x),
                         datafld3(x) == datafld2(right(x))*2,
                         datafld3(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__nocondition__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld2(right(x))*2,
                         datafld3(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__keyrange__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(right(x))*2,
                         datafld2(x) == datafld3(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__datacompare__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(3 == datafld2(x),
                         datafld2(x) == datafld1(right(x))*2,
                         datafld2(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__nocondition__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld1(right(x))*2,
                         datafld3(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(right(x))*2,
                         datafld2(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__datacompare__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(3 == datafld3(x),
                         datafld3(x) == datafld2(right(x))*2,
                         datafld3(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__nocondition__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(True,
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__nocondition__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1, datafld1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld3(right(x))*2,
                         datafld1(x) == datafld3(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__keyrange__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1, datafld1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__keyrange__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(right(x))*2,
                         datafld3(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(3 == datafld3(x),
                         datafld3(x) == datafld2(right(x))*2,
                         datafld3(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld3(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__nocondition__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1, datafld1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld3(right(x))*2,
                         datafld1(x) == datafld3(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__keyrange__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(right(x))*2,
                         datafld2(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1, datafld1(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__datacompare__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1, datafld2(x) == -2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(3 == datafld2(x),
                         datafld2(x) == datafld1(right(x))*2,
                         datafld2(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld2(right(x))*2,
                         datafld1(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__keyrange__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(right(x))*2,
                         datafld2(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld2(right(x))*2,
                         datafld1(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__nocondition__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__nocondition__skipone__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld3(right(x))*2,
                         datafld1(x) == datafld3(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(right(x))*2,
                         datafld1(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld2(right(x))*2,
                         datafld1(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld2(right(x))*2,
                         datafld1(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__keyrange__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__keyrange__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld2(right(x))*2,
                         datafld3(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(3 == datafld3(x),
                         datafld3(x) == datafld2(right(x))*2,
                         datafld3(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__nocondition__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(True,
                         datafld2(x) == datafld3(right(x))*2,
                         datafld2(x) == datafld3(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__keyrange__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__keyrange__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld2(right(x))*2,
                         datafld3(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(3 == datafld2(x),
                         datafld2(x) == datafld3(right(x))*2,
                         datafld2(x) == datafld3(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld3(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2, datafld1(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      If(True,
                         datafld1(x) == datafld2(right(x))*2,
                         datafld1(x) == datafld2(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__keyrange__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2, datafld2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(right(x))*2,
                         datafld2(x) == datafld1(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__datacompare__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2, datafld2(x) == 4),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      If(3 == datafld2(x),
                         datafld2(x) == datafld3(right(x))*2,
                         datafld2(x) == datafld3(left(x))*2)),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__nocondition__normal__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 4, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         2*datafld2(left(x)) -
                         datafld3(left(x)),
                         datafld2(x) ==
                         2*datafld2(right(x)) -
                         datafld3(right(x))),
                      If(True,
                         datafld3(x) == datafld2(left(x)),
                         datafld3(x) == datafld2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__keyrange__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 4, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld2(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld2(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x)),
                         datafld2(x) == datafld3(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__nocondition__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 4, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld2(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld2(right(x))),
                      If(True,
                         datafld2(x) == datafld1(left(x)),
                         datafld2(x) == datafld1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__keyrange__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 4, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x)),
                         datafld1(x) == datafld3(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__nocondition__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 4, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld2(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld2(right(x))),
                      If(True,
                         datafld2(x) == datafld1(left(x)),
                         datafld2(x) == datafld1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__keyrange__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 4, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld3(left(x)),
                         datafld1(x) == datafld3(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__nocondition__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 4, datafld1(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         2*datafld2(left(x)) -
                         datafld1(left(x)),
                         datafld2(x) ==
                         2*datafld2(right(x)) -
                         datafld1(right(x))),
                      If(True,
                         datafld1(x) == datafld2(left(x)),
                         datafld1(x) == datafld2(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__keyrange__normal__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 4, datafld2(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld2(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld2(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x)),
                         datafld2(x) == datafld3(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__nocondition__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 4, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld3(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld3(right(x))),
                      If(True,
                         datafld3(x) == datafld1(left(x)),
                         datafld3(x) == datafld1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__keyrange__normal__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 4, datafld3(x) == 2),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld3(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld3(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x)),
                         datafld3(x) == datafld1(right(x)))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark di>0keyupdate__dag__nocondition__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(True,
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  -1*(0 + datafld3(x) + datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__keyrange__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  -1*(0 + datafld3(x) + datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x)))),
                  key(x) ==
                  -1*(0 + datafld3(x) + datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  -1*(0 + datafld2(x) + datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(True,
                         datafld1(x) == 3*datafld1(right(x)),
                         datafld1(x) == 3*datafld1(left(x)))),
                  key(x) ==
                  -1*(0 + datafld2(x) + datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__keyrange__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  -1*(0 + datafld3(x) + datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__datacompare__normal__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld1(x) == 1, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x)))),
                  key(x) ==
                  -1*(0 + datafld1(x) + datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__datacompare__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  -1*(0 + datafld3(x) + datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__nocondition__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld1(x) == 1, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(True,
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  -1*(0 + datafld1(x) + datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld1(x) == 1, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  -1*(0 + datafld1(x) + datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__datacompare__normal__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x)))),
                  key(x) ==
                  -1*(0 + datafld2(x) + datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(right(x)),
                         datafld1(x) == 3*datafld1(left(x)))),
                  key(x) ==
                  -1*(0 + datafld2(x) + datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__nocondition__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(True,
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  -1*(0 + datafld2(x) + datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld1(x) == 1, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  -1*(0 + datafld1(x) + datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__datacompare__normal__cycle=datafld3,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x)))),
                  key(x) ==
                  -1*(0 + datafld3(x) + datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__datacompare__skipone__cycle=datafld2,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  -1*(0 + datafld2(x) + datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di%2==0keyupdate__dag__nocondition__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(True,
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__dag__keyrange__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  0 + 1*datafld3(x) + 3*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__dag__datacompare__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__nocondition__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(True,
                         datafld1(x) == 3*datafld1(right(x)),
                         datafld1(x) == 3*datafld1(left(x)))),
                  key(x) ==
                  0 + 1*datafld2(x) + 3*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(right(x)),
                         datafld1(x) == 3*datafld1(left(x)))),
                  key(x) ==
                  0 + 1*datafld2(x) + 3*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__nocondition__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(True,
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__keyrange__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == 3*datafld1(right(x)),
                         datafld1(x) == 3*datafld1(left(x)))),
                  key(x) ==
                  0 + 1*datafld2(x) + 3*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__datacompare__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__nocondition__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(True,
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__keyrange__skipone__cycle=datafld3,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  0 + 1*datafld3(x) + 3*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__datacompare__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__nocondition__skipone__cycle=datafld1,datafld3__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(True,
                         datafld3(x) == 3*datafld3(right(x)),
                         datafld3(x) == 3*datafld3(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__keyrange__skipone__cycle=datafld1,datafld2__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(right(x)),
                         datafld2(x) == 3*datafld2(left(x)))),
                  key(x) ==
                  0 + 1*datafld1(x) + 3*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__datacompare__skipone__cycle=datafld2,datafld1__2/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(right(x)),
                         datafld1(x) == 3*datafld1(left(x)))),
                  key(x) ==
                  0 + 1*datafld2(x) + 3*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__nocondition__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 1,
                             datafld3(x) ==
                             datafld2(right(x)) + 1),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x)) + 1,
                             datafld3(x) ==
                             datafld2(left(x)) + 1),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld2(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 1,
                             datafld1(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(right(x)) + 1,
                             datafld3(x) ==
                             datafld1(left(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__datacompare__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__dag__datacompare__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 2, datafld3(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(right(x)) + 1,
                             datafld1(x) ==
                             datafld3(left(x)) + 1),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 1,
                             datafld3(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 2, datafld3(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(left(x)) + 1,
                             datafld1(x) ==
                             datafld3(right(x)) + 1),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 1,
                             datafld3(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__nocondition__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld1(right(x)) + 1,
                             datafld3(x) ==
                             datafld1(left(x)) + 1),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__keyrange__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(right(x)) + 1,
                             datafld3(x) ==
                             datafld2(left(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__datacompare__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x)) + 1,
                             datafld3(x) ==
                             datafld1(left(x)) + 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__nocondition__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 1,
                             datafld3(x) ==
                             datafld2(right(x)) + 1),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld2(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      And(If(True,
                             datafld2(x) ==
                             datafld1(right(x)) + 1,
                             datafld2(x) ==
                             datafld1(left(x)) + 1),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x)) + 1,
                             datafld1(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__keyrange__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 2, datafld3(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 1,
                         datafld2(x) ==
                         datafld1(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 1,
                             datafld1(x) ==
                             datafld3(right(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) + 1,
                             datafld3(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x)) + 1,
                             datafld1(x) ==
                             datafld2(left(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__datacompare__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 1,
                             datafld3(x) ==
                             datafld2(right(x)) + 1),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__maxheap__datacompare__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld2(x) == 2, datafld3(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(right(x)) + 1,
                             datafld2(x) ==
                             datafld3(left(x)) + 1),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) + 1,
                             datafld3(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__nocondition__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld2(x) == 2, datafld3(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 1,
                         datafld1(x) ==
                         datafld2(right(x)) + 1),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x)) + 1,
                             datafld3(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(right(x)) + 1,
                             datafld1(x) ==
                             datafld2(left(x)) + 1),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld2(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 1,
                             datafld1(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(right(x)) + 1,
                             datafld3(x) ==
                             datafld1(left(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld2(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x)) + 1,
                             datafld1(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__bst__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x)) + 1,
                             datafld3(x) ==
                             datafld1(left(x)) + 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__nocondition__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__nocondition__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld1(right(x)) + 1,
                             datafld3(x) ==
                             datafld1(left(x)) + 1),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__keyrange__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 1,
                         datafld2(x) ==
                         datafld3(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) + 1,
                             datafld3(x) ==
                             datafld1(right(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 1,
                             datafld1(x) ==
                             datafld2(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__keyrange__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld2(x) == 2, datafld1(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 1,
                         datafld3(x) ==
                         datafld2(right(x)) + 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(right(x)) + 1,
                             datafld2(x) ==
                             datafld1(left(x)) + 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 1,
                             datafld1(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__datacompare__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 1,
                         datafld1(x) ==
                         datafld3(right(x)) + 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 1,
                             datafld3(x) ==
                             datafld2(right(x)) + 1),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) + 1,
                             datafld2(x) ==
                             datafld1(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark idx+1||exp+1||>0__tree_p__datacompare__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 2, datafld2(x) == 3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 1,
                         datafld3(x) ==
                         datafld1(right(x)) + 1),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(right(x)) + 1,
                             datafld1(x) ==
                             datafld2(left(x)) + 1),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 1,
                             datafld2(x) ==
                             datafld3(right(x)) + 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__nocondition__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld2(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      And(If(True,
                             datafld2(x) ==
                             datafld1(left(x)) - 1,
                             datafld2(x) ==
                             datafld1(right(x)) - 1),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x)) - 1,
                             datafld1(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__nocondition__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld2(x) == -4, datafld3(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(right(x)) - 1,
                             datafld2(x) ==
                             datafld3(left(x)) - 1),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__keyrange__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld2(x) == -4, datafld3(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld1(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x)) - 1,
                             datafld1(x) ==
                             datafld2(left(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__datacompare__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld1(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__dag__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld2(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(right(x)) - 1,
                             datafld2(x) ==
                             datafld1(left(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x)) - 1,
                             datafld1(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__nocondition__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld1(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__nocondition__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld2(x) == -4, datafld3(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(right(x)) - 1,
                             datafld2(x) ==
                             datafld3(left(x)) - 1),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__keyrange__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld3(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) - 1,
                             datafld3(x) ==
                             datafld2(right(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) - 1,
                             datafld2(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__keyrange__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld2(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(right(x)) - 1,
                             datafld2(x) ==
                             datafld1(left(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) - 1,
                             datafld1(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__datacompare__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld2(x) == -4, datafld3(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld2(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(right(x)) - 1,
                             datafld2(x) ==
                             datafld1(left(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x)) - 1,
                             datafld1(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__nocondition__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld1(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__nocondition__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld3(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld1(right(x)) - 1,
                             datafld3(x) ==
                             datafld1(left(x)) - 1),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld1(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld1(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) - 1,
                         datafld3(x) ==
                         datafld1(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x)) - 1,
                             datafld1(x) ==
                             datafld2(left(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) - 1,
                             datafld2(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld2(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) - 1,
                             datafld2(x) ==
                             datafld1(right(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x)) - 1,
                             datafld1(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__maxheap__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld3(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x)) - 1,
                             datafld3(x) ==
                             datafld1(left(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__nocondition__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld3(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld3(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x)) - 1,
                             datafld3(x) ==
                             datafld2(left(x)) - 1),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) - 1,
                             datafld2(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__keyrange__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld3(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__keyrange__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld2(x) == -4, datafld3(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) - 1,
                         datafld1(x) ==
                         datafld2(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(right(x)) - 1,
                             datafld2(x) ==
                             datafld3(left(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__datacompare__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld3(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__bst__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld3(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x)) - 1,
                             datafld3(x) ==
                             datafld1(left(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld1(x) == -4, datafld3(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(left(x)) - 1,
                             datafld1(x) ==
                             datafld3(right(x)) - 1),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) - 1,
                             datafld3(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld3(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x)) - 1,
                             datafld3(x) ==
                             datafld2(left(x)) - 1),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) - 1,
                             datafld2(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__keyrange__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -2,
              And(datafld3(x) == -4, datafld2(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) - 1,
                         datafld1(x) ==
                         datafld3(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) - 1,
                             datafld3(x) ==
                             datafld2(right(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) - 1,
                             datafld2(x) ==
                             datafld1(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld1(x) == -4, datafld3(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) - 1,
                         datafld2(x) ==
                         datafld1(right(x)) - 1),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(right(x)) - 1,
                             datafld1(x) ==
                             datafld3(left(x)) - 1),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) - 1,
                             datafld3(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__datacompare__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -2,
              And(datafld3(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) - 1,
                         datafld2(x) ==
                         datafld3(right(x)) - 1),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) - 1,
                             datafld3(x) ==
                             datafld1(right(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) - 1,
                             datafld1(x) ==
                             datafld2(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark (idx+1)*-2||exp-1||<0__tree_p__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -2,
              And(datafld2(x) == -4, datafld1(x) == -6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) - 1,
                         datafld3(x) ==
                         datafld2(right(x)) - 1),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(right(x)) - 1,
                             datafld2(x) ==
                             datafld1(left(x)) - 1),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x)) - 1,
                             datafld1(x) ==
                             datafld3(right(x)) - 1))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(left(x)) + 4,
                             datafld1(x) ==
                             datafld3(right(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__nocondition__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(right(x)) + 4,
                             datafld2(x) ==
                             datafld3(left(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 4,
                             datafld2(x) ==
                             datafld1(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 6,
                             datafld1(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__keyrange__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(right(x)) + 4,
                             datafld2(x) ==
                             datafld3(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__datacompare__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 4,
                             datafld1(x) ==
                             datafld2(right(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__dag__datacompare__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__nocondition__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 4,
                             datafld3(x) ==
                             datafld2(right(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      And(If(True,
                             datafld2(x) ==
                             datafld1(right(x)) + 4,
                             datafld2(x) ==
                             datafld1(left(x)) + 4),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x)) + 6,
                             datafld1(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 4,
                             datafld2(x) ==
                             datafld1(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 6,
                             datafld1(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__keyrange__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(right(x)) + 4,
                             datafld2(x) ==
                             datafld3(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__datacompare__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) + 4,
                             datafld3(x) ==
                             datafld1(right(x)) + 4),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x)) + 4,
                             datafld3(x) ==
                             datafld1(left(x)) + 4),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__nocondition__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(True,
                             datafld3(x) ==
                             datafld1(left(x)) + 4,
                             datafld3(x) ==
                             datafld1(right(x)) + 4),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x)) + 4,
                             datafld3(x) ==
                             datafld2(left(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 4,
                             datafld2(x) ==
                             datafld1(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 6,
                             datafld1(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__keyrange__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(right(x)) + 4,
                             datafld2(x) ==
                             datafld1(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 6,
                             datafld1(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__datacompare__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 4,
                             datafld1(x) ==
                             datafld2(right(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__maxheap__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x)) + 4,
                             datafld3(x) ==
                             datafld1(left(x)) + 4),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__nocondition__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 4,
                             datafld3(x) ==
                             datafld2(right(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__nocondition__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__keyrange__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) + 4,
                             datafld3(x) ==
                             datafld2(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__keyrange__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(right(x)) + 4,
                             datafld2(x) ==
                             datafld3(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__datacompare__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 4,
                             datafld3(x) ==
                             datafld2(right(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__bst__datacompare__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(right(x)) + 4,
                             datafld2(x) ==
                             datafld3(left(x)) + 4),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__nocondition__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(left(x)) + 4,
                             datafld2(x) ==
                             datafld3(right(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(right(x)) + 4,
                             datafld1(x) ==
                             datafld2(left(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__keyrange__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) + 4,
                             datafld2(x) ==
                             datafld3(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 2, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(right(x)) + 4,
                             datafld3(x) ==
                             datafld1(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__datacompare__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 2, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 4,
                             datafld3(x) ==
                             datafld2(right(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 0))

----------------------

Benchmark 2||exp+2*(idx+1)||%2==0__tree_p__datacompare__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 2, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 0))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(left(x)) + 4,
                             datafld1(x) ==
                             datafld3(right(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__nocondition__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__keyrange__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 4,
                             datafld1(x) ==
                             datafld3(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__datacompare__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 3, datafld1(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) + 4,
                             datafld3(x) ==
                             datafld1(right(x)) + 4),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__dag__datacompare__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(right(x)) + 4,
                             datafld1(x) ==
                             datafld2(left(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(left(x)) + 4,
                             datafld1(x) ==
                             datafld3(right(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(right(x)) + 4,
                             datafld1(x) ==
                             datafld2(left(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__keyrange__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 3, datafld1(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) + 4,
                             datafld3(x) ==
                             datafld1(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__keyrange__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld2(x) == 3, datafld1(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(right(x)) + 4,
                             datafld2(x) ==
                             datafld1(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)) + 6,
                             datafld1(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__datacompare__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x)) + 4,
                             datafld1(x) ==
                             datafld3(right(x)) + 4),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree__datacompare__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld2(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(right(x)) + 4,
                             datafld2(x) ==
                             datafld3(left(x)) + 4),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(left(x)) + 4,
                             datafld1(x) ==
                             datafld3(right(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__nocondition__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__keyrange__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) + 4,
                             datafld3(x) ==
                             datafld2(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x)) + 4,
                             datafld1(x) ==
                             datafld2(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld2(x) == 3, datafld1(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld2(left(x)) + 2,
                         datafld3(x) ==
                         datafld2(right(x)) + 2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) + 4,
                             datafld2(x) ==
                             datafld1(right(x)) + 4),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x)) + 6,
                             datafld1(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__maxheap__datacompare__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(right(x)) + 4,
                             datafld1(x) ==
                             datafld2(left(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__nocondition__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(left(x)) + 4,
                             datafld3(x) ==
                             datafld2(right(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x)) + 4,
                             datafld3(x) ==
                             datafld2(left(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__keyrange__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 3, datafld1(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)) + 4,
                             datafld3(x) ==
                             datafld1(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__datacompare__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x)) + 4,
                             datafld1(x) ==
                             datafld2(right(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__bst__datacompare__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(right(x)) + 4,
                             datafld3(x) ==
                             datafld2(left(x)) + 4),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__nocondition__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(left(x)) + 4,
                             datafld1(x) ==
                             datafld2(right(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld3(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         datafld3(left(x)) + 2,
                         datafld1(x) ==
                         datafld3(right(x)) + 2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x)) + 4,
                             datafld3(x) ==
                             datafld2(left(x)) + 4),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x)) + 6,
                             datafld2(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 1,
              And(datafld1(x) == 3, datafld2(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         datafld1(left(x)) + 2,
                         datafld3(x) ==
                         datafld1(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 4,
                             datafld1(x) ==
                             datafld2(right(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)) + 6,
                             datafld2(x) ==
                             datafld3(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld3(x) == 3, datafld1(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         datafld3(left(x)) + 2,
                         datafld2(x) ==
                         datafld3(right(x)) + 2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(right(x)) + 4,
                             datafld3(x) ==
                             datafld1(left(x)) + 4),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)) + 6,
                             datafld1(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__datacompare__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 1,
              And(datafld2(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) ==
                         datafld2(left(x)) + 2,
                         datafld1(x) ==
                         datafld2(right(x)) + 2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x)) + 4,
                             datafld2(x) ==
                             datafld3(right(x)) + 4),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x)) + 6,
                             datafld3(x) ==
                             datafld1(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x)%2 == 1))

----------------------

Benchmark 2*idx+1||exp+2*(idx+1)||%2==1__tree_p__datacompare__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 1,
              And(datafld1(x) == 3, datafld3(x) == 5)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) ==
                         datafld1(left(x)) + 2,
                         datafld2(x) ==
                         datafld1(right(x)) + 2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(right(x)) + 4,
                             datafld1(x) ==
                             datafld3(left(x)) + 4),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x)) + 6,
                             datafld3(x) ==
                             datafld2(right(x)) + 6))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x)%2 == 1))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__nocondition__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld2(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(True,
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__nocondition__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(True,
                             datafld3(x) ==
                             datafld1(right(x))*2,
                             datafld3(x) ==
                             datafld1(left(x))*2),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__keyrange__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__datacompare__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld1(x) == -2, datafld3(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__dag__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld2(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(right(x))*2,
                             datafld2(x) ==
                             datafld1(left(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__nocondition__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1,
              And(datafld2(x) == -2, datafld3(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld2(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(True,
                             datafld2(x) ==
                             datafld1(right(x))*2,
                             datafld2(x) ==
                             datafld1(left(x))*2),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__datacompare__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1,
              And(datafld3(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld2(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(right(x))*2,
                             datafld2(x) ==
                             datafld1(left(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__nocondition__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1,
              And(datafld2(x) == -2, datafld3(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__keyrange__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(right(x))*2,
                             datafld3(x) ==
                             datafld1(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__datacompare__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1,
              And(datafld2(x) == -2, datafld3(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__maxheap__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x))*2,
                             datafld3(x) ==
                             datafld1(left(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__nocondition__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(right(x))*2,
                             datafld3(x) ==
                             datafld1(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__datacompare__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__bst__datacompare__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1,
              And(datafld2(x) == -2, datafld3(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(right(x))*2,
                             datafld2(x) ==
                             datafld3(left(x))*2),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__nocondition__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == -1,
              And(datafld3(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld1(x) == -2, datafld2(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__datacompare__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == -1,
              And(datafld3(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) < 0))

----------------------

Benchmark -(idx+1)||exp*2||<0__tree_p__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == -1,
              And(datafld2(x) == -2, datafld1(x) == -3)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(right(x))*2,
                             datafld2(x) ==
                             datafld1(left(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) < 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__nocondition__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x))*2,
                             datafld3(x) ==
                             datafld2(left(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__keyrange__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__datacompare__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__dag__datacompare__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__nocondition__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__nocondition__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(True,
                             datafld2(x) ==
                             datafld3(right(x))*2,
                             datafld2(x) ==
                             datafld3(left(x))*2),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__keyrange__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 4, datafld1(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree__datacompare__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 4, datafld1(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(right(x))*2,
                             datafld3(x) ==
                             datafld1(left(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__nocondition__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 4, datafld1(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(True,
                             datafld3(x) ==
                             datafld1(right(x))*2,
                             datafld3(x) ==
                             datafld1(left(x))*2),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 4, datafld1(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__keyrange__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(right(x))*2,
                             datafld2(x) ==
                             datafld3(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__datacompare__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__maxheap__datacompare__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__nocondition__normal__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__nocondition__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld3(right(x))*2,
                             datafld1(x) ==
                             datafld3(left(x))*2),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(right(x))*2,
                             datafld1(x) ==
                             datafld2(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld2(x) == 4, datafld1(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == datafld2(left(x))*2,
                         datafld3(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(left(x))*2,
                             datafld1(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__bst__datacompare__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             datafld3(right(x))*2,
                             datafld2(x) ==
                             datafld3(left(x))*2),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__nocondition__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 2,
              And(datafld1(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == datafld1(left(x))*2,
                         datafld3(x) == datafld1(right(x))*2),
                      And(If(True,
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld3(x) == 4, datafld2(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == datafld3(left(x))*2,
                         datafld1(x) == datafld3(right(x))*2),
                      And(If(True,
                             datafld3(x) ==
                             datafld2(right(x))*2,
                             datafld3(x) ==
                             datafld2(left(x))*2),
                          If(True,
                             datafld2(x) ==
                             datafld1(left(x))*2,
                             datafld2(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__keyrange__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 2,
              And(datafld2(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) == datafld2(left(x))*2,
                         datafld1(x) == datafld2(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x))*2,
                             datafld2(x) ==
                             datafld3(right(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(right(x))*2,
                             datafld1(x) ==
                             datafld3(left(x))*2),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__datacompare__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld3(x) == 4, datafld1(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld3(left(x))*2,
                         datafld2(x) == datafld3(right(x))*2),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld1(left(x))*2,
                             datafld3(x) ==
                             datafld1(right(x))*2),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld2(left(x))*2,
                             datafld1(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark (idx+1)*2||exp*2||>0__tree_p__datacompare__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 2,
              And(datafld1(x) == 4, datafld3(x) == 6)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == datafld1(left(x))*2,
                         datafld2(x) == datafld1(right(x))*2),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             datafld3(right(x))*2,
                             datafld1(x) ==
                             datafld3(left(x))*2),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             datafld2(left(x))*2,
                             datafld3(x) ==
                             datafld2(right(x))*2))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__nocondition__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld2(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld1(left(x)),
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld1(right(x))),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x)),
                             datafld1(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__nocondition__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 6,
              And(datafld2(x) == 4, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld3(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld3(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld3(right(x)),
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld3(left(x))),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x)),
                             datafld3(x) ==
                             datafld1(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld2(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld1(left(x)),
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld1(right(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)),
                             datafld1(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__dag__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld1(x) == 4, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld2(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             2*datafld1(right(x)) -
                             datafld2(right(x)),
                             datafld1(x) ==
                             2*datafld1(left(x)) -
                             datafld2(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)),
                             datafld2(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__nocondition__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 6,
              And(datafld3(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         2*datafld2(left(x)) -
                         datafld1(left(x)),
                         datafld2(x) ==
                         2*datafld2(right(x)) -
                         datafld1(right(x))),
                      And(If(True,
                             datafld3(x) ==
                             2*datafld3(left(x)) -
                             datafld1(left(x)),
                             datafld3(x) ==
                             2*datafld3(right(x)) -
                             datafld1(right(x))),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x)),
                             datafld1(x) ==
                             datafld2(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld1(x) == 4, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld2(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld2(right(x))),
                      And(If(True,
                             datafld1(x) ==
                             2*datafld1(right(x)) -
                             datafld2(right(x)),
                             datafld1(x) ==
                             2*datafld1(left(x)) -
                             datafld2(left(x))),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)),
                             datafld2(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__keyrange__normal__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 6,
              And(datafld2(x) == 4, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld3(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld3(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld3(left(x)),
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld3(right(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld1(left(x)),
                             datafld3(x) ==
                             datafld1(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree__keyrange__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld2(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld1(right(x)),
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld1(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)),
                             datafld1(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__nocondition__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 6,
              And(datafld1(x) == 4, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         2*datafld2(left(x)) -
                         datafld3(left(x)),
                         datafld2(x) ==
                         2*datafld2(right(x)) -
                         datafld3(right(x))),
                      And(If(True,
                             datafld1(x) ==
                             2*datafld1(left(x)) -
                             datafld3(left(x)),
                             datafld1(x) ==
                             2*datafld1(right(x)) -
                             datafld3(right(x))),
                          If(True,
                             datafld3(x) ==
                             datafld2(left(x)),
                             datafld3(x) ==
                             datafld2(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld1(x) == 4, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld2(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld2(right(x))),
                      And(If(True,
                             datafld1(x) ==
                             2*datafld1(right(x)) -
                             datafld2(right(x)),
                             datafld1(x) ==
                             2*datafld1(left(x)) -
                             datafld2(left(x))),
                          If(True,
                             datafld2(x) ==
                             datafld3(left(x)),
                             datafld2(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__keyrange__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 6,
              And(datafld1(x) == 4, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         2*datafld2(left(x)) -
                         datafld3(left(x)),
                         datafld2(x) ==
                         2*datafld2(right(x)) -
                         datafld3(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             2*datafld1(left(x)) -
                             datafld3(left(x)),
                             datafld1(x) ==
                             2*datafld1(right(x)) -
                             datafld3(right(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             datafld2(left(x)),
                             datafld3(x) ==
                             datafld2(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__maxheap__keyrange__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 6,
              And(datafld3(x) == 4, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld2(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             2*datafld3(right(x)) -
                             datafld2(right(x)),
                             datafld3(x) ==
                             2*datafld3(left(x)) -
                             datafld2(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)),
                             datafld2(x) ==
                             datafld1(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__nocondition__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld2(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld1(left(x)),
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld1(right(x))),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x)),
                             datafld1(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__nocondition__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 6,
              And(datafld2(x) == 4, datafld3(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld3(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld3(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld3(right(x)),
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld3(left(x))),
                          If(True,
                             datafld3(x) ==
                             datafld1(left(x)),
                             datafld3(x) ==
                             datafld1(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__keyrange__normal__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld1(x) == 4, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld2(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             2*datafld1(left(x)) -
                             datafld2(left(x)),
                             datafld1(x) ==
                             2*datafld1(right(x)) -
                             datafld2(right(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld3(left(x)),
                             datafld2(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__bst__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 6,
              And(datafld3(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) ==
                         2*datafld2(left(x)) -
                         datafld1(left(x)),
                         datafld2(x) ==
                         2*datafld2(right(x)) -
                         datafld1(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             2*datafld3(right(x)) -
                             datafld1(right(x)),
                             datafld3(x) ==
                             2*datafld3(left(x)) -
                             datafld1(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld2(left(x)),
                             datafld1(x) ==
                             datafld2(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__nocondition__normal__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld2(x) == 6,
              And(datafld3(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) ==
                         2*datafld2(left(x)) -
                         datafld1(left(x)),
                         datafld2(x) ==
                         2*datafld2(right(x)) -
                         datafld1(right(x))),
                      And(If(True,
                             datafld3(x) ==
                             2*datafld3(left(x)) -
                             datafld1(left(x)),
                             datafld3(x) ==
                             2*datafld3(right(x)) -
                             datafld1(right(x))),
                          If(True,
                             datafld1(x) ==
                             datafld2(left(x)),
                             datafld1(x) ==
                             datafld2(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld2(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld2(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld1(right(x)),
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld1(left(x))),
                          If(True,
                             datafld1(x) ==
                             datafld3(left(x)),
                             datafld1(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__keyrange__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld3(x) == 6,
              And(datafld2(x) == 4, datafld1(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) ==
                         2*datafld3(left(x)) -
                         datafld1(left(x)),
                         datafld3(x) ==
                         2*datafld3(right(x)) -
                         datafld1(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             2*datafld2(left(x)) -
                             datafld1(left(x)),
                             datafld2(x) ==
                             2*datafld2(right(x)) -
                             datafld1(right(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             datafld3(left(x)),
                             datafld1(x) ==
                             datafld3(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld3(x) > 0))

----------------------

Benchmark 2*(n-idx)||2d1-dk,2d2-dk,..d1||>0__tree_p__keyrange__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(datafld1(x) == 6,
              And(datafld3(x) == 4, datafld2(x) == 2)),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld1(x) ==
                         2*datafld1(left(x)) -
                         datafld2(left(x)),
                         datafld1(x) ==
                         2*datafld1(right(x)) -
                         datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             2*datafld3(right(x)) -
                             datafld2(right(x)),
                             datafld3(x) ==
                             2*datafld3(left(x)) -
                             datafld2(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             datafld1(left(x)),
                             datafld2(x) ==
                             datafld1(right(x))))),
                  True))))))
# goal
goal = Implies(tree(x), Implies(x != nil, datafld1(x) > 0))

----------------------

Benchmark di>0keyupdate__dag__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1,
                  And(datafld1(x) == 2, datafld2(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(True,
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(True,
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld3(x) +
                   datafld1(x) +
                   datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1,
                  And(datafld3(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             3*datafld3(right(x)),
                             datafld3(x) ==
                             3*datafld3(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld2(x) +
                   datafld3(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1,
                  And(datafld2(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld3(x) +
                   datafld2(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__dag__datacompare__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld1(x) == 1,
                  And(datafld2(x) == 2, datafld3(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld1(x) +
                   datafld2(x) +
                   datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1,
                  And(datafld2(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(True,
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld3(x) +
                   datafld2(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1,
                  And(datafld3(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             3*datafld3(right(x)),
                             datafld3(x) ==
                             3*datafld3(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld2(x) +
                   datafld3(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__datacompare__normal__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1,
                  And(datafld1(x) == 2, datafld3(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld2(x) +
                   datafld1(x) +
                   datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree__datacompare__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld1(x) == 1,
                  And(datafld3(x) == 2, datafld2(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             3*datafld3(right(x)),
                             datafld3(x) ==
                             3*datafld3(left(x))),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld1(x) +
                   datafld3(x) +
                   datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1,
                  And(datafld2(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(True,
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld3(x) +
                   datafld2(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1,
                  And(datafld1(x) == 2, datafld3(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld2(x) +
                   datafld1(x) +
                   datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1,
                  And(datafld2(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld3(x) +
                   datafld2(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__maxheap__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1,
                  And(datafld2(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld3(x) +
                   datafld2(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__nocondition__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld1(x) == 1,
                  And(datafld3(x) == 2, datafld2(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      And(If(True,
                             datafld3(x) ==
                             3*datafld3(right(x)),
                             datafld3(x) ==
                             3*datafld3(left(x))),
                          If(True,
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld1(x) +
                   datafld3(x) +
                   datafld2(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1,
                  And(datafld1(x) == 2, datafld3(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld2(x) +
                   datafld1(x) +
                   datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__datacompare__normal__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld3(x) == 1,
                  And(datafld2(x) == 2, datafld1(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld3(x) +
                   datafld2(x) +
                   datafld1(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di>0keyupdate__tree_p__datacompare__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == -1,
              And(datafld2(x) == 1,
                  And(datafld1(x) == 2, datafld3(x) == 3))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  -1*
                  (0 +
                   datafld2(x) +
                   datafld1(x) +
                   datafld3(x))))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x) < 0))

----------------------

Benchmark di%2==0keyupdate__dag__nocondition__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0,
                  And(datafld1(x) == 2, datafld3(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(True,
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(True,
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld2(x) +
                  3*datafld1(x) +
                  5*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__dag__keyrange__skipone__cycle=datafld2,datafld3,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0,
                  And(datafld3(x) == 2, datafld1(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             3*datafld3(right(x)),
                             datafld3(x) ==
                             3*datafld3(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld2(x) +
                  3*datafld3(x) +
                  5*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__dag__datacompare__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(True,
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0,
                  And(datafld1(x) == 2, datafld3(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld2(x),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(3 == datafld3(x),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld2(x) +
                  3*datafld1(x) +
                  5*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__nocondition__skipone__cycle=datafld1,datafld2,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0,
                  And(datafld2(x) == 2, datafld3(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(True,
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld1(x) +
                  3*datafld2(x) +
                  5*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0,
                  And(datafld1(x) == 2, datafld3(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld2(x) +
                  3*datafld1(x) +
                  5*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree__datacompare__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(intersection(htree(left(x)), htree(right(x))) ==
               K(Int, False),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0,
                  And(datafld1(x) == 2, datafld2(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld3(x) +
                  3*datafld1(x) +
                  5*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0,
                  And(datafld2(x) == 2, datafld1(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(True,
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld3(x) +
                  3*datafld2(x) +
                  5*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__keyrange__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0,
                  And(datafld2(x) == 2, datafld1(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld3(x) +
                  3*datafld2(x) +
                  5*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__maxheap__datacompare__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(key(left(x)) <= key(x),
                       key(right(x)) <= key(x)),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0,
                  And(datafld2(x) == 2, datafld1(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld3(x),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(3 == datafld1(x),
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld3(x) +
                  3*datafld2(x) +
                  5*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__nocondition__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0,
                  And(datafld1(x) == 2, datafld2(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(True,
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(True,
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld3(x) +
                  3*datafld1(x) +
                  5*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__keyrange__skipone__cycle=datafld3,datafld1,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0,
                  And(datafld1(x) == 2, datafld2(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld3(x) +
                  3*datafld1(x) +
                  5*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__bst__datacompare__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(And(key(x) > -100, key(x) < 100),
                       And(max(left(x)) <= key(x),
                           key(x) <= min(right(x)))),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0,
                  And(datafld3(x) == 2, datafld2(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             3*datafld3(right(x)),
                             datafld3(x) ==
                             3*datafld3(left(x))),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld1(x) +
                  3*datafld3(x) +
                  5*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__nocondition__skipone__cycle=datafld3,datafld2,datafld1__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld3(x) == 0,
                  And(datafld2(x) == 2, datafld1(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(True,
                         datafld3(x) == 3*datafld3(left(x)),
                         datafld3(x) == 3*datafld3(right(x))),
                      And(If(True,
                             datafld2(x) ==
                             3*datafld2(right(x)),
                             datafld2(x) ==
                             3*datafld2(left(x))),
                          If(True,
                             datafld1(x) ==
                             3*datafld1(left(x)),
                             datafld1(x) ==
                             3*datafld1(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld3(x) +
                  3*datafld2(x) +
                  5*datafld1(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__keyrange__skipone__cycle=datafld2,datafld1,datafld3__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld2(x) == 0,
                  And(datafld1(x) == 2, datafld3(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(And(-50 < key(x), 50 > key(x)),
                         datafld2(x) == 3*datafld2(left(x)),
                         datafld2(x) == 3*datafld2(right(x))),
                      And(If(And(-50 < key(x), 50 > key(x)),
                             datafld1(x) ==
                             3*datafld1(right(x)),
                             datafld1(x) ==
                             3*datafld1(left(x))),
                          If(And(-50 < key(x), 50 > key(x)),
                             datafld3(x) ==
                             3*datafld3(left(x)),
                             datafld3(x) ==
                             3*datafld3(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld2(x) +
                  3*datafld1(x) +
                  5*datafld3(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

Benchmark di%2==0keyupdate__tree_p__datacompare__skipone__cycle=datafld1,datafld3,datafld2__3/3

# recursive definition

tree = RecFunction('tree', fgsort, boolsort)
AddRecDefinition(tree, x, If(x == nil,
   True,
   And(And(And(tree(left(x)), tree(right(x))),
           And(And(And(parent(left(x)) == x,
                       parent(right(x)) == x),
                   intersection(htree(left(x)),
                                htree(right(x))) ==
                   K(Int, False)),
               And(intersection(Store(K(Int, False),
                                      x,
                                      True),
                                htree(right(x))) ==
                   K(Int, False),
                   intersection(htree(left(x)),
                                Store(K(Int, False),
                                      x,
                                      True)) ==
                   K(Int, False)))),
       If(And(left(x) == nil, right(x) == nil),
          And(key(x) == 2,
              And(datafld1(x) == 0,
                  And(datafld3(x) == 2, datafld2(x) == 4))),
          And(And(left(x) != nil, right(x) != nil),
              And(And(If(3 == datafld1(x),
                         datafld1(x) == 3*datafld1(left(x)),
                         datafld1(x) == 3*datafld1(right(x))),
                      And(If(3 == datafld3(x),
                             datafld3(x) ==
                             3*datafld3(right(x)),
                             datafld3(x) ==
                             3*datafld3(left(x))),
                          If(3 == datafld2(x),
                             datafld2(x) ==
                             3*datafld2(left(x)),
                             datafld2(x) ==
                             3*datafld2(right(x))))),
                  key(x) ==
                  0 +
                  1*datafld1(x) +
                  3*datafld3(x) +
                  5*datafld2(x)))))))
# goal
goal = Implies(tree(x), Implies(x != nil, key(x)%2 == 0))

----------------------

